// define global vars for use across stages
def cmId, cmVersionId

pipeline {
    agent any

    environment {
        DR_API_KEY = credentials('DR_API_KEY')
    }

    stages {
        stage('Init') {
            steps {
                sh 'echo ================= RUNNING INIT STEPS =================='
                sh 'mv devops/jenkins/drcicd/*/* .; rm -rf -- */'
                sh 'echo $CME_ID $APP_SERVER; ls -lart'
            }
        }
        stage('DRUM Testing') {
            steps {
                sh 'echo ================= RUNNING DRUM STEPS =================='
                // sh 'drum validation -cd . --input surgical-dataset-test.csv --positive-class-label 1 --negative-class-label 0 --target-type binary'
            }
        }
        stage('Upload Custom Model Artifacts') {
            steps {
                sh 'echo ================= RUNNING CM UPLOAD STEPS =================='
                script {
                    def cmString = sh returnStdout:true, script: '''
                    #!/bin/bash
                    curl -s -X POST $APP_SERVER/api/v2/customModels/ \\
                        -H "Authorization: bearer $DR_API_KEY" \\
                        -H "Content-Type: application/json" \\
                        -H "Accept: application/json" \\
                        -d \'{"name": "Jenkins Test","customModelType":"inference","targetType": "Binary","targetName": "complication","positiveClassLabel": "1","negativeClassLabel": "0"}\'
                    '''
                    echo cmString
                    def cmJson = readJSON text: cmString
                    cmId = cmJson['id']
                    echo "custom model id = " + cmId

                    def cmFilesLs = sh returnStdout:true, script: 'ls *.{txt,pkl,py}'
                    def cmFiles = cmFilesLs.split('\n')
                    def cmFilesCurlArgs = ''
                    for (cmFile in cmFiles) {
                        cmFilesCurlArgs += "-F 'file=@./" + cmFile + "' -F 'filePath=" + cmFile + "' "
                    }

                    def cmVersionString = sh returnStdout:true, script: """
                    #!/bin/bash
                    curl -s -X POST $APP_SERVER/api/v2/customModels/${cmId}/versions/ \\
                        -H 'Authorization: bearer $DR_API_KEY' \\
                        -H 'Content-Type: multipart/form-data' \\
                        -H 'Accept: application/json' \\
                        -F 'baseEnvironmentId=$CME_ID' \\
                        ${cmFilesCurlArgs}
                    """
                    echo cmVersionString
                    def cmVersionJson = readJSON text: cmVersionString
                    cmVersionId = cmVersionJson['id']
                    echo "custom model version id = " + cmVersionId

                }
                    
            }
        }
        stage('Build Custom Model Dependencies') {
            steps {
                sh 'echo ================= RUNNING CM BUILD STEPS =================='
                script {
                    def buildTimeout = 600
                    def buildTime = 0
                    def buildPollInterval = 5

                    def cmBuildString = sh returnStdout:true, script: """
                    #!/bin/bash
                    curl -s -X POST $APP_SERVER/api/v2/customModels/${cmId}/versions/${cmVersionId}/dependencyBuild/ \\
                        -H 'Authorization: bearer $DR_API_KEY' \\
                        -H 'Accept: application/json'
                    """
                    echo cmBuildString
                    def cmBuildJson = readJSON text: cmBuildString
                    cmBuildStatus = cmBuildJson['buildStatus']
                    echo "custom model build status = " + cmBuildStatus

                    while (cmBuildStatus in ['submitted', 'processing'] && buildTime < buildTimeout) {
                        cmBuildString = sh returnStdout:true, script: """
                        #!/bin/bash
                        curl -s -X GET $APP_SERVER/api/v2/customModels/${cmId}/versions/${cmVersionId}/dependencyBuild/ \\
                            -H 'Authorization: bearer $DR_API_KEY' \\
                            -H 'Accept: application/json'
                        """
                        cmBuildJson = readJSON text: cmBuildString
                        cmBuildStatus = cmBuildJson['buildStatus']
                        echo "custom model build status = " + cmBuildStatus
                        sleep(buildPollInterval)
                        buildTime += buildPollInterval
                    }

                    if (cmBuildStatus == 'failed') {
                        error "Custom Model Build Failed!"
                    }

                }
                
            }
        }
        stage('Test Custom Model') {
            //TODO: handle and fill in datasetId
            steps {
                sh 'echo ================= RUNNING CM TEST STEPS =================='
                script {
                    def testTimeout = 600
                    def testTime = 0
                    def testPollInterval = 5
                    
                    def cmTestString = sh returnStdout:true, script: """
                    #!/bin/bash
                    curl -s -X POST $APP_SERVER/api/v2/customModelTests/ \\
                        -H 'Authorization: bearer $DR_API_KEY' \\
                        -H 'Content-Type: application/json' \\
                        -H 'Accept: application/json' \\
                        -d \'{"customModelId": "$cmId","customModelVersionId":"$cmVersionId","datasetId": "$TEST_DS_ID"}\'
                    """
                    echo cmTestString
                    def cmTestJson = readJSON text: cmTestString
                    cmTestStatusId = cmTestJson['statusId']
                    
                    def cmTestStatus = 'not_tested'
                    while (cmTestStatus in ['not_tested', 'queued', 'in_progress'] && testTime < testTimeout) {
                        def cmTestStatusString = sh returnStdout:true, script: """
                        #!/bin/bash
                        curl -s -X GET $APP_SERVER/api/v2/customModelTests/${cmTestStatusId}/ \\
                            -H "Authorization: bearer $DR_API_KEY" \\
                            -H "Accept: application/json"
                        """
                        echo cmTestStatusString
                        def cmTestStatusJson = readJSON text: cmTestStatusString
                        cmTestStatus = cmTestStatusJson['overallStatus']
                        echo "custom model test status = " + cmTestStatus
                        sleep(testPollInterval)
                        testTime += testPollInterval
                    }

                    if (cmTestStatus == 'failed') {
                        error "Custom Model Test Failed!"
                    }
                    
                }
                
            }
        }
        stage('Perform API Testing'){
            steps {
                sh 'echo ================= RUNNING API TESTING STEPS =================='
                sh 'curl -s ifconfig.me'
            }
        }
    }

    post {
        always {
            echo "DR CICD PIPELINE DONE"
            // sh "curl -s -X DELETE $APP_SERVER/api/v2/customModels/${cmId}/ -H 'Authorization: bearer $DR_API_KEY'"
            deleteDir()
        }
    }
}
