// define global vars for use across stages
def cmId, cmVersionId

pipeline {
    agent any

    environment {
        DR_API_KEY = credentials('DR_API_KEY')
    }

    stages {
        stage('Init') {
            steps {
                sh 'echo ================= RUNNING INIT STEPS =================='
                sh 'mv devops/jenkins/drcicd/*/* .; rm -rf -- */'
                sh 'echo $CME_ID $APP_SERVER; ls -lart'
            }
        }
        stage('DRUM Testing') {
            steps {
                sh 'echo ================= RUNNING DRUM STEPS =================='
                // sh 'drum validation -cd . --input surgical-dataset-test.csv --positive-class-label 1 --negative-class-label 0 --target-type binary'
            }
        }
        stage('Upload Custom Model Artifacts') {
            steps {
                sh 'echo ================= RUNNING CM UPLOAD STEPS =================='
                script {
                    def cmString = sh returnStdout:true, script: '''
                    #!/bin/bash
                    curl -s -X POST $APP_SERVER/api/v2/customModels/ \\
                        -H "Authorization: bearer $DR_API_KEY" \\
                        -H "Content-Type: application/json" \\
                        -H "Accept: application/json" \\
                        -d \'{"name": "Jenkins Test","customModelType":"inference","targetType": "Binary","targetName": "complication","positiveClassLabel": "1","negativeClassLabel": "0"}\'
                    '''
                    echo cmString
                    def cmJson = readJSON text: cmString
                    cmId = cmJson['id']
                    echo "custom model id = " + cmId

                    def cmFilesLs = sh returnStdout:true, script: 'ls *.{txt,pkl,py}'
                    def cmFiles = cmFilesLs.split('\n')
                    def cmFilesCurlArgs = ''
                    for (cmFile in cmFiles) {
                        cmFilesCurlArgs += "-F 'file=@./" + cmFile + "' -F 'filePath=" + cmFile + "' "
                    }

                    def cmVersionString = sh returnStdout:true, script: """
                    #!/bin/bash
                    curl -s -X POST $APP_SERVER/api/v2/customModels/${cmId}/versions/ \\
                        -H 'Authorization: bearer $DR_API_KEY' \\
                        -H 'Content-Type: multipart/form-data' \\
                        -H 'Accept: application/json' \\
                        -F 'baseEnvironmentId=$CME_ID' \\
                        ${cmFilesCurlArgs}
                    """
                    echo cmVersionString
                    def cmVersionJson = readJSON text: cmVersionString
                    cmVersionId = cmVersionJson['id']
                    echo "custom model version id = " + cmVersionId

                }
                    
            }
        }
        stage('Build Custom Model Dependencies') {
            steps {
                sh 'echo ================= RUNNING CM BUILD STEPS =================='
                script {
                    def cmBuildString = sh returnStdout:true, script: """
                    #!/bin/bash
                    curl -s -X POST $APP_SERVER/api/v2/customModels/${cmId}/versions/${cmVersionId}/dependencyBuild/ \\
                        -H "Authorization: bearer $DR_API_KEY" \\
                        -H "Accept: application/json"
                    """
                    echo cmBuildString
                    def cmBuildJson = readJSON text: cmBuildString
                    cmBuildStatus = cmBuildJson['buildStatus']
                    echo "custom model build status = " + cmBuildStatus

                }
                    
            }
        }
        stage('Perform API Testing'){
            steps {
                sh 'echo ================= RUNNING API TESTING STEPS =================='
                sh 'curl -s ifconfig.me'
            }
        }
    }

    post {
        always {
            echo "DR CICD PIPELINE DONE"
            // sh "curl -s -X DELETE $APP_SERVER/api/v2/customModels/${cmId}/ -H 'Authorization: bearer $DR_API_KEY'"
            deleteDir()
        }
    }
}
